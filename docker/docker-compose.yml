# docker-compose.yml
version: '3.8'

services:
  # Neo4j图数据库服务
  neo4j:
    image: neo4j:5.10.0
    container_name: futures_knowledge_neo4j
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
      - ./neo4j.conf:/conf/neo4j.conf
    environment:
      - NEO4J_AUTH=neo4j/password  # 初始密码，生产环境应更改
      - NEO4J_dbms_memory_pagecache_size=1G
      - NEO4J_dbms.memory.heap.initial_size=1G
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_PLUGINS=["apoc"]  # 安装APOC插件
    networks:
      - futures_knowledge_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:7474"]
      interval: 30s
      timeout: 10s
      retries: 5

  # 后端API服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: futures_knowledge_backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - uploads_data:/app/uploads
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
      - PYTHONUNBUFFERED=1
    depends_on:
      - neo4j
    networks:
      - futures_knowledge_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 5

  # 前端应用
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: futures_knowledge_frontend
    ports:
      - "80:80"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - VITE_API_URL=http://localhost:8000
    depends_on:
      - backend
    networks:
      - futures_knowledge_network
    restart: unless-stopped

# 数据持久化存储
volumes:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  uploads_data:

# 网络配置
networks:
  futures_knowledge_network:
    driver: bridge

# neo4j.conf (存储在项目根目录)
# dbms.security.procedures.allowlist=apoc.*
# dbms.security.procedures.unrestricted=apoc.*
# apoc.import.file.enabled=true
# apoc.export.file.enabled=true